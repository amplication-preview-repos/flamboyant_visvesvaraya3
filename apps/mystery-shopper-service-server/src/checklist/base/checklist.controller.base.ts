/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ChecklistService } from "../checklist.service";
import { ChecklistCreateInput } from "./ChecklistCreateInput";
import { Checklist } from "./Checklist";
import { ChecklistFindManyArgs } from "./ChecklistFindManyArgs";
import { ChecklistWhereUniqueInput } from "./ChecklistWhereUniqueInput";
import { ChecklistUpdateInput } from "./ChecklistUpdateInput";

export class ChecklistControllerBase {
  constructor(protected readonly service: ChecklistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Checklist })
  async createChecklist(
    @common.Body() data: ChecklistCreateInput
  ): Promise<Checklist> {
    return await this.service.createChecklist({
      data: {
        ...data,

        task: data.task
          ? {
              connect: data.task,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taskItem: true,
        completed: true,

        task: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Checklist] })
  @ApiNestedQuery(ChecklistFindManyArgs)
  async checklists(@common.Req() request: Request): Promise<Checklist[]> {
    const args = plainToClass(ChecklistFindManyArgs, request.query);
    return this.service.checklists({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taskItem: true,
        completed: true,

        task: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Checklist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async checklist(
    @common.Param() params: ChecklistWhereUniqueInput
  ): Promise<Checklist | null> {
    const result = await this.service.checklist({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        taskItem: true,
        completed: true,

        task: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Checklist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateChecklist(
    @common.Param() params: ChecklistWhereUniqueInput,
    @common.Body() data: ChecklistUpdateInput
  ): Promise<Checklist | null> {
    try {
      return await this.service.updateChecklist({
        where: params,
        data: {
          ...data,

          task: data.task
            ? {
                connect: data.task,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          taskItem: true,
          completed: true,

          task: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Checklist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteChecklist(
    @common.Param() params: ChecklistWhereUniqueInput
  ): Promise<Checklist | null> {
    try {
      return await this.service.deleteChecklist({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          taskItem: true,
          completed: true,

          task: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
