/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Checklist as PrismaChecklist,
  Task as PrismaTask,
} from "@prisma/client";

export class ChecklistServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChecklistCountArgs, "select">
  ): Promise<number> {
    return this.prisma.checklist.count(args);
  }

  async checklists(
    args: Prisma.ChecklistFindManyArgs
  ): Promise<PrismaChecklist[]> {
    return this.prisma.checklist.findMany(args);
  }
  async checklist(
    args: Prisma.ChecklistFindUniqueArgs
  ): Promise<PrismaChecklist | null> {
    return this.prisma.checklist.findUnique(args);
  }
  async createChecklist(
    args: Prisma.ChecklistCreateArgs
  ): Promise<PrismaChecklist> {
    return this.prisma.checklist.create(args);
  }
  async updateChecklist(
    args: Prisma.ChecklistUpdateArgs
  ): Promise<PrismaChecklist> {
    return this.prisma.checklist.update(args);
  }
  async deleteChecklist(
    args: Prisma.ChecklistDeleteArgs
  ): Promise<PrismaChecklist> {
    return this.prisma.checklist.delete(args);
  }

  async getTask(parentId: string): Promise<PrismaTask | null> {
    return this.prisma.checklist
      .findUnique({
        where: { id: parentId },
      })
      .task();
  }
}
