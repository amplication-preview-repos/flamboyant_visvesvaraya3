/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Checklist } from "./Checklist";
import { ChecklistCountArgs } from "./ChecklistCountArgs";
import { ChecklistFindManyArgs } from "./ChecklistFindManyArgs";
import { ChecklistFindUniqueArgs } from "./ChecklistFindUniqueArgs";
import { CreateChecklistArgs } from "./CreateChecklistArgs";
import { UpdateChecklistArgs } from "./UpdateChecklistArgs";
import { DeleteChecklistArgs } from "./DeleteChecklistArgs";
import { Task } from "../../task/base/Task";
import { ChecklistService } from "../checklist.service";
@graphql.Resolver(() => Checklist)
export class ChecklistResolverBase {
  constructor(protected readonly service: ChecklistService) {}

  async _checklistsMeta(
    @graphql.Args() args: ChecklistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Checklist])
  async checklists(
    @graphql.Args() args: ChecklistFindManyArgs
  ): Promise<Checklist[]> {
    return this.service.checklists(args);
  }

  @graphql.Query(() => Checklist, { nullable: true })
  async checklist(
    @graphql.Args() args: ChecklistFindUniqueArgs
  ): Promise<Checklist | null> {
    const result = await this.service.checklist(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Checklist)
  async createChecklist(
    @graphql.Args() args: CreateChecklistArgs
  ): Promise<Checklist> {
    return await this.service.createChecklist({
      ...args,
      data: {
        ...args.data,

        task: args.data.task
          ? {
              connect: args.data.task,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Checklist)
  async updateChecklist(
    @graphql.Args() args: UpdateChecklistArgs
  ): Promise<Checklist | null> {
    try {
      return await this.service.updateChecklist({
        ...args,
        data: {
          ...args.data,

          task: args.data.task
            ? {
                connect: args.data.task,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Checklist)
  async deleteChecklist(
    @graphql.Args() args: DeleteChecklistArgs
  ): Promise<Checklist | null> {
    try {
      return await this.service.deleteChecklist(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Task, {
    nullable: true,
    name: "task",
  })
  async getTask(@graphql.Parent() parent: Checklist): Promise<Task | null> {
    const result = await this.service.getTask(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
