/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdministratorService } from "../administrator.service";
import { AdministratorCreateInput } from "./AdministratorCreateInput";
import { Administrator } from "./Administrator";
import { AdministratorFindManyArgs } from "./AdministratorFindManyArgs";
import { AdministratorWhereUniqueInput } from "./AdministratorWhereUniqueInput";
import { AdministratorUpdateInput } from "./AdministratorUpdateInput";
import { VerificationFindManyArgs } from "../../verification/base/VerificationFindManyArgs";
import { Verification } from "../../verification/base/Verification";
import { VerificationWhereUniqueInput } from "../../verification/base/VerificationWhereUniqueInput";
import { TaskFindManyArgs } from "../../task/base/TaskFindManyArgs";
import { Task } from "../../task/base/Task";
import { TaskWhereUniqueInput } from "../../task/base/TaskWhereUniqueInput";

export class AdministratorControllerBase {
  constructor(protected readonly service: AdministratorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Administrator })
  async createAdministrator(
    @common.Body() data: AdministratorCreateInput
  ): Promise<Administrator> {
    return await this.service.createAdministrator({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Administrator] })
  @ApiNestedQuery(AdministratorFindManyArgs)
  async administrators(
    @common.Req() request: Request
  ): Promise<Administrator[]> {
    const args = plainToClass(AdministratorFindManyArgs, request.query);
    return this.service.administrators({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Administrator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async administrator(
    @common.Param() params: AdministratorWhereUniqueInput
  ): Promise<Administrator | null> {
    const result = await this.service.administrator({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        email: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Administrator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdministrator(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() data: AdministratorUpdateInput
  ): Promise<Administrator | null> {
    try {
      return await this.service.updateAdministrator({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Administrator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdministrator(
    @common.Param() params: AdministratorWhereUniqueInput
  ): Promise<Administrator | null> {
    try {
      return await this.service.deleteAdministrator({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          email: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/verifications")
  @ApiNestedQuery(VerificationFindManyArgs)
  async findVerifications(
    @common.Req() request: Request,
    @common.Param() params: AdministratorWhereUniqueInput
  ): Promise<Verification[]> {
    const query = plainToClass(VerificationFindManyArgs, request.query);
    const results = await this.service.findVerifications(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        feedback: true,
        approved: true,

        agent: {
          select: {
            id: true,
          },
        },

        administrator: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/verifications")
  async connectVerifications(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() body: VerificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      verifications: {
        connect: body,
      },
    };
    await this.service.updateAdministrator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/verifications")
  async updateVerifications(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() body: VerificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      verifications: {
        set: body,
      },
    };
    await this.service.updateAdministrator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/verifications")
  async disconnectVerifications(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() body: VerificationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      verifications: {
        disconnect: body,
      },
    };
    await this.service.updateAdministrator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/tasks")
  @ApiNestedQuery(TaskFindManyArgs)
  async findTasks(
    @common.Req() request: Request,
    @common.Param() params: AdministratorWhereUniqueInput
  ): Promise<Task[]> {
    const query = plainToClass(TaskFindManyArgs, request.query);
    const results = await this.service.findTasks(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        status: true,

        agent: {
          select: {
            id: true,
          },
        },

        administrator: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tasks")
  async connectTasks(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tasks: {
        connect: body,
      },
    };
    await this.service.updateAdministrator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tasks")
  async updateTasks(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tasks: {
        set: body,
      },
    };
    await this.service.updateAdministrator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tasks")
  async disconnectTasks(
    @common.Param() params: AdministratorWhereUniqueInput,
    @common.Body() body: TaskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tasks: {
        disconnect: body,
      },
    };
    await this.service.updateAdministrator({
      where: params,
      data,
      select: { id: true },
    });
  }
}
