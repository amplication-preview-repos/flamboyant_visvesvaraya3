/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Administrator as PrismaAdministrator,
  Verification as PrismaVerification,
  Task as PrismaTask,
} from "@prisma/client";

export class AdministratorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdministratorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.administrator.count(args);
  }

  async administrators(
    args: Prisma.AdministratorFindManyArgs
  ): Promise<PrismaAdministrator[]> {
    return this.prisma.administrator.findMany(args);
  }
  async administrator(
    args: Prisma.AdministratorFindUniqueArgs
  ): Promise<PrismaAdministrator | null> {
    return this.prisma.administrator.findUnique(args);
  }
  async createAdministrator(
    args: Prisma.AdministratorCreateArgs
  ): Promise<PrismaAdministrator> {
    return this.prisma.administrator.create(args);
  }
  async updateAdministrator(
    args: Prisma.AdministratorUpdateArgs
  ): Promise<PrismaAdministrator> {
    return this.prisma.administrator.update(args);
  }
  async deleteAdministrator(
    args: Prisma.AdministratorDeleteArgs
  ): Promise<PrismaAdministrator> {
    return this.prisma.administrator.delete(args);
  }

  async findVerifications(
    parentId: string,
    args: Prisma.VerificationFindManyArgs
  ): Promise<PrismaVerification[]> {
    return this.prisma.administrator
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .verifications(args);
  }

  async findTasks(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<PrismaTask[]> {
    return this.prisma.administrator
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasks(args);
  }
}
