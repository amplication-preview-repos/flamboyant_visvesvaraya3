/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { EnumTaskStatus } from "./EnumTaskStatus";
import { ChecklistCreateNestedManyWithoutTasksInput } from "./ChecklistCreateNestedManyWithoutTasksInput";
import { Type } from "class-transformer";
import { AgentWhereUniqueInput } from "../../agent/base/AgentWhereUniqueInput";
import { AdministratorWhereUniqueInput } from "../../administrator/base/AdministratorWhereUniqueInput";

@InputType()
class TaskCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  title?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumTaskStatus,
  })
  @IsEnum(EnumTaskStatus)
  @IsOptional()
  @Field(() => EnumTaskStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => ChecklistCreateNestedManyWithoutTasksInput,
  })
  @ValidateNested()
  @Type(() => ChecklistCreateNestedManyWithoutTasksInput)
  @IsOptional()
  @Field(() => ChecklistCreateNestedManyWithoutTasksInput, {
    nullable: true,
  })
  checklists?: ChecklistCreateNestedManyWithoutTasksInput;

  @ApiProperty({
    required: false,
    type: () => AgentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AgentWhereUniqueInput)
  @IsOptional()
  @Field(() => AgentWhereUniqueInput, {
    nullable: true,
  })
  agent?: AgentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => AdministratorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AdministratorWhereUniqueInput)
  @IsOptional()
  @Field(() => AdministratorWhereUniqueInput, {
    nullable: true,
  })
  administrator?: AdministratorWhereUniqueInput | null;
}

export { TaskCreateInput as TaskCreateInput };
